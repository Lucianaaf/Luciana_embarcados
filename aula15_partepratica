Data: 27/04/2017

1. Crie dois processos, e faça com que o processo-filho gere uma onda quadrada, enquanto o processo-pai faz polling de um botão no 
GPIO, aumentando a frequência da onda sempre que o botão for pressionado. A frequência da onda quadrada deve começar em 1 Hz, 
e dobrar cada vez que o botão for pressionado. A frequência máxima é de 64 Hz, devendo retornar a 1 Hz se o botão for pressionado 
novamente.

Polling: significa procurar constantemente. Isso normalmente é aplicado a um software onde o microcontrolador pesquise os pinos
         I/O para verificar se existem entradas de usuários.
         
         
 #include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <sys/poll.h>
#include <sys/types.h>

//variável global
//int fd;
struct pollfd pfd;


void sair()
{
	//apagar a pasta 
	pfd.fd = open("/sys/class/gpio/unexport", O_WRONLY);
	write(pfd.fd,"17",2);
	write(pfd.fd,"27",2);
	close(pfd.fd);
	
	
	exit(0);
}

int main(int argc, char **argv)
{

	int fp[2];
	//struct pollfd pfd;
	char buffer;
	int botao;

	//declaração de processo-filho:
	pid_t pid;

	//declaração de pipe:
	pipe(fp);

	//Sinal de interrupção:
	signal(SIGINT, sair);

	//Processo filho:
	//Irá gerar a onda
	if(pid == 0)
	{
		//Definição do export:
		pfd.fd = open("/sys/class/gpio/export", O_WRONLY);
		write(pfd.fd,"17",2);
		close(pfd.fd);

		//Definindo o pino 17 como saída:
		pfd.fd = open("/sys/class/gpio/gpio17/direction", O_WRONLY);
		write(pfd.fd,"out",4);
		close(pfd.fd);

		//Atribuindo valor ao pino 17 para gerar a onda:
		pfd.fd = open("/sys/class/gpio/gpio17/value", O_WRONLY);

		//leitura do arquivo do botão para ver se ele foi pressionado: 
  		while(1)
		{
			read(fp[0], &botao, sizeof(botao)));
			if(botao == '1')
			{
				freq = freq*2;
				botao = 0;
				//Verificar se a frequência chegou a 64 hz
				if(freq == 128)
				{
					 freq = 1;
				}
			}
			//Geração da onda quadrada:
			write(pfd.fd,"1",2);
			sleep(5/freq);
			write(pfd.fd,"0",2);
			sleep(5/frequencia);
		}
	}
	
	//Processo pai: verifica se o botão foi pressionado
	else {
		//Definição do export:
		pfd.fd = open("/sys/class/gpio/export", O_WRONLY);
		write(pfd.fd,"27",2);
		close(pfd.fd);

		//edge no pino 27
		pfd.fd = open("/sys/class/gpio/gpio27/edge",O_WRONLY);
		write(pfd.fd,"falling",7);
		close(pfd.fd);
		

		//Definindo o pino 27 como entrada:
		pfd.fd = open("/sys/class/gpio/gpio27/direction", O_WRONLY);
		write(pfd.fd,"in",4);
		close(pfd.fd);

		//Atribuindo valor ao pino 27 para verificar o botão:
		pfd.fd = open("/sys/class/gpio/gpio27/value", O_WRONLY);

		pfd.events = POLLPRI | POLLERR;
		pfd.revents = 0;

		//O processo pai deve verificar se o botao foi pressionado na borda de descida.
		while(1){
			//reposicionado o ponteiro para o arquivo aberto:
			lseek(pfd.fd, 0, SEEK_SET);
			read(pfd.fd, &botao, 2);
			poll(&pfd, 1, -1);
			puts("Borda de descida!");
			//Verfica se o botao foi pressionado e escreve no arquivo para o filho lê
			if(botao == '1')
			{
				write(fp[1], &botao, sizeof(botao));
			}
	
	
	     }
	

	return 0;
}

         


