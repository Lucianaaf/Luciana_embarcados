Data: 04/04/2017

1. Crie um programa em C que cria uma thread, e faça com que o programa principal envie os valores 
1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para a thread, com intervalos de 1 segundo entre cada envio. Depois
 de o programa principal enviar o número 10, ele aguarda 1 segundo e termina a execução. A thread 
escreve na tela cada valor recebido, e quando ela receber o valor 10, ela termina a execução.

Código em c:
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

int i;

void* print (void *c)

{
	
	int *numero =  c;
	
	for(i= 0;i <10;i++){
		printf("%d", numero[i]);
		//sleep(1);
	}
	return NULL;
}



int main ()
{
	
	int numero[10];
	
	
	for(i=0;i<10;i++){
		numero[i]= i + 1; 
		 
		sleep(1);
	}
	
	pthread_t thread_id1;
	pthread_create(&thread_id1, NULL, &print, numero);
	pthread_join (thread_id1, NULL);
	printf("\nPrograma terminado\n");

	return 0;
}

No terminal:
$ gcc exercicio1.c -o tente1 -lpthread
$ ./tente1
12345678910
Programa terminado

Não está enviando um número de cada vez.


2. Crie um programa em C que preenche o vetor 'long int v[50000]' completamente com valores aleatórios (use a função random()),
 e que procura o valor máximo do vetor por dois métodos:
	(a) Pela busca completa no vetor v[];
Código em c:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>


int main()
{
	long int v[50000];
	int i;
	long int valor_maximo;
	v[0] = 0;
	valor_maximo = v[0];

	for(i = 0; i < 50000; i++)
	{
		//gerando valores aleatórios:
		v[i] = rand();
		//printf(" %ld", v[i]);
		if(v[i] > valor_maximo)
		{
			valor_maximo = v[i];
			
	        }
	}
	printf("\n O valor maximo e %ld \n", valor_maximo);

	return 0;

}

	
No terminal:
$ gcc exercicio2a.c -o tente2 
$ ./tente2

 O valor maximo e 2147469841 

	(b) Separando o vetor em 4 partes, e usando 4 threads para cada uma encontrar o máximo de cada parte. Ao final das threads, o programa principal compara o resultado das quatro threads para definir o máximo do vetor.
Ao final do programa principal, compare os resultados obtidos pelos dois métodos.

Código em c:

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

volatile long int valor_maximo[4];


void* busca1 (void *v)

{
	
	long int *numero = v;
	int i;
	numero[0] = 0;
	valor_maximo[0] = numero[0];

	for(i = 0; i < 12500; i++)
	{
	
		if(numero[i] > valor_maximo[0])
		{
			valor_maximo[0] = numero[i];
			
	        }
	}
	return NULL;
}

void* busca2 (void *v)

{
	long  int *numero = v;
	int i;
	numero[0]= 0;
	valor_maximo[1] =numero[0];

	for(i = 0; i < 25000; i++)
	{
	
		if(numero[i] > valor_maximo[1])
		{
			valor_maximo[1] = numero[i];
			
	        }
	}
	return NULL;
	
}

void* busca3 (void *v)

{
	
	long  int *numero = v;
	int i;
	
	numero[0] = 0;
	valor_maximo[2] = numero[0];

	for(i = 0; i < 50000; i++)
	{
	
		if(numero[i] > valor_maximo[2])
		{
			valor_maximo[2] = numero[i];
			
	        }
	}
	return NULL;
}

void* busca4(void *v)

{
	
	long  int *numero = v;
	int i;
	
	numero[0] = 0;
	valor_maximo[3]= numero[0];

	for(i = 0; i < 12500; i++)
	{
	
		if(numero[i] > valor_maximo[3])
		{
			valor_maximo[3] = numero[i];
			
	        }
	}
	return NULL;
}

int main()
{
	//declarações
	long int v[50000];
	int i,j;
	
	long int maximo_maximo;

	pthread_t thread_id1;
	pthread_t thread_id2;
	pthread_t thread_id3;
	pthread_t thread_id4;
	
	

	for(i = 0; i < 50000; i++)
	{
		//gerando valores aleatórios:
		v[i] = rand();
		
	}
	

	
	//Criação das threads
	pthread_create(&thread_id1, NULL, &busca1, v);
	pthread_create(&thread_id1, NULL, &busca2, v);
	pthread_create(&thread_id1, NULL, &busca3, v);
	pthread_create(&thread_id1, NULL, &busca4, v);
	
	pthread_join(thread_id4,NULL);
	pthread_join(thread_id3,NULL);
	pthread_join(thread_id2,NULL);
	pthread_join(thread_id1,NULL);


	maximo_maximo = valor_maximo[0];

	for(j = 0; j < 4 ; j++)
	{
		if(valor_maximo[j] > maximo_maximo){
			maximo_maximo = valor_maximo[j];
			
		}
	}

	printf("\n O valor maximo de todas as threads e %ld \n", maximo_maximo);


	return 0;

}


No terminal:
$ gcc exercicio2b.c -o tente3 -lpthread
$ ./tente3

 O valor maximo de todas as threads e 2147469841 


3. Repita o exercício anterior, mas calcule a média do vetor ao invés do valor máximo.

4. Repita o exercício anterior, mas calcule a variância do vetor ao invés da média.
